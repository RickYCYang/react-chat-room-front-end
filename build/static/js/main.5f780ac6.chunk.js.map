{"version":3,"sources":["Image/chat.png","redux/reducers/loginReducer.js","redux/actionTypes.js","redux/reducers/chatRoomReducer.js","redux/reducers/rootReducer.js","config.js","ApiService.js","redux/sagas/loginSaga.js","redux/sagas/chatRoomSaga.js","redux/sagas/saga.js","redux/configureStore.js","view/Login.jsx","redux/Actions/loginAction.js","view/ChatRoom/Components/MessagePanel.jsx","view/ChatRoom/Components/MessageSender.jsx","view/ChatRoom/ChatRoom.jsx","redux/Actions/charRoomAction.js","view/Home.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","initState","account","password","status","email","error","userName","loginReducer","state","action","type","payload","token","message","messageBox","webSocket","onlineCount","connectStatus","chatRoomReducer","concat","createRootReducer","history","combineReducers","router","connectRouter","PROD_HOST_NAME","getCookie","key","Cookies","get","setCookie","value","set","expires","delCookie","remove","loginRequest","data","fetch","method","headers","dataType","credentials","body","JSON","stringify","then","response","json","result","catch","console","log","put","push","connectWebSocket","webSocketClient","rootSaga","takeEvery","createBrowserHistory","sagaMiddleware","createSagaMiddleware","mapDispatchToProps","setAccountPassword","e","currentTarget","id","login","checkLogined","undefined","connect","useEffect","loginHandler","a","alert","includes","columns","square","imageUrl","require","style","display","label","className","trailingIcon","role","icon","onChange","outlined","raised","onClick","disabled","MessagePanel","messagesEnd","useSelector","scrollIntoView","behavior","map","timestamp","useName","float","clear","ref","el","MessageSender","useState","setMessage","enterPress","setEnterPress","sendMessage","Date","getHours","getMinutes","getSeconds","getUTCMilliseconds","emit","enterClick","document","addEventListener","removeEventListener","onTrailingIconSelect","setOnlineCount","dispatch","useDispatch","initWebSocket","on","Home","align","navIcon","tabIndex","hasRipple","actionItem","aria-label","store","preloadedState","createStore","compose","applyMiddleware","routerMiddleware","run","configureStore","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f780ac6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chat.36cb8b4b.png\";","import {\n    SET_USER_ACCOUNT,\n    SET_USER_PASSWORD,\n    LOGIN_REQUEST,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL\n} from '../actionTypes'\n\nconst initState = {\n    account: '',\n    password: '',\n    status: '',\n    email: '',\n    error: '',\n    userName: ''\n}\n\nconst loginReducer = (state = initState, action) => {\n    switch(action.type){\n        case SET_USER_ACCOUNT: {\n            return {...state, account: action.payload};\n        }\n        case SET_USER_PASSWORD: {\n            return {...state, password: action.payload};\n        }\n        case LOGIN_REQUEST: {\n            return {...state, status: 'loading'};\n        }\n        case LOGIN_SUCCESS: {\n            return {\n                ...state, \n                status: 'logined',\n                email: action.payload.email,\n                token: action.payload.token,\n                userName: action.payload.userName\n            };\n        }\n        case LOGIN_FAIL: {\n            return {\n                ...state, \n                status: 'error',\n                message: action.payload.message,\n            };\n        }\n        default: return state;\n    }\n}\n\nexport default loginReducer;","export let SET_USER_ACCOUNT = 'SET_USER_ACCOUNT';\nexport let SET_USER_PASSWORD = 'SET_USER_PASSWORD';\nexport let LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport let LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport let LOGIN_FAIL = 'LOGIN_FAIL';\n\nexport let CONNECT_WEB_SOCKET = 'CONNECT_WEB_SOCKET';\nexport let CONNECT_WEB_SOCKET_SUCCESS = 'CONNECT_WEB_SOCKET_SUCCESS';\nexport let CONNECT_WEB_SOCKET_FAIL = 'CONNECT_WEB_SOCKET_FAIL';\nexport let SET_ONLINE_COUNT = 'SET_ONLINE_COUNT';\n","import {\n    CONNECT_WEB_SOCKET,\n    CONNECT_WEB_SOCKET_SUCCESS,\n    CONNECT_WEB_SOCKET_FAIL,\n    SET_ONLINE_COUNT\n} from '../actionTypes'\n\nconst initState = {\n    messageBox: [],\n    webSocket: '',\n    onlineCount: 0,\n    connectStatus: '',\n}\n\nconst chatRoomReducer = (state = initState, action) => {\n    switch(action.type){\n        case CONNECT_WEB_SOCKET:{\n            return {\n                ...state,\n                connectStatus: 'connecting'\n            }\n        }\n        case CONNECT_WEB_SOCKET_SUCCESS:{\n            return{\n                ...state,\n                connectStatus: 'connected',\n                webSocket: action.payload\n            }\n        }\n        case CONNECT_WEB_SOCKET_FAIL:{\n            return{\n                ...state,\n                connectStatus: 'disconnect',\n                webSocket: action.payload\n            }\n        }\n        case SET_ONLINE_COUNT:{\n            return{\n                ...state,\n                onlineCount: action.payload\n            }\n        }\n        case 'SET_MESSAGE_BOX':{\n            return{\n                ...state,\n                messageBox: state.messageBox.concat([action.payload])\n            }\n        }\n        default: return state;\n    }\n}\n\nexport default chatRoomReducer;","import { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\nimport loginReducer from './loginReducer';\nimport chatRoomReducer from './chatRoomReducer';\n\n\nconst createRootReducer = (history) => combineReducers({\n  router: connectRouter(history),\n  loginReducer,\n  chatRoomReducer\n});\n\nexport default createRootReducer;","export const PROD_HOST_NAME = 'https://express-chat-room-back-end.herokuapp.com';\nexport const DEV_HOST_NAME = 'http://localhost:3000';\nexport const PROD_ACCESS_CONTROL_ALLOW_ORIGIN = 'https://express-chat-room-back-end.herokuapp.com';\nexport const DEV_ACCESS_CONTROL_ALLOW_ORIGIN = 'http://localhost:3001';","import Cookies from 'js-cookie';\nimport {\n    PROD_HOST_NAME,\n    DEV_HOST_NAME,\n    PROD_ACCESS_CONTROL_ALLOW_ORIGIN,\n    DEV_ACCESS_CONTROL_ALLOW_ORIGIN\n} from './config'\n\nconst hostName = \"https://express-chat-room-back-end.herokuapp.com\" //\"http://localhost:3000\"\nconst token =  getCookie(\"token\");\n\nexport function getCookie(key) {    \n    return Cookies.get(key);;\n}\n\nexport let setCookie = (key, value) => {\n    Cookies.set(key, value, { expires: 7 });\n}\n\nexport let delCookie = (key) => {\n    Cookies.remove(key);\n}\n\nexport let fetchGet = (webApi) => {\n    //console.log(hostName + \"/\" + webApi);\n    return fetch(DEV_HOST_NAME + \"/\" + webApi,{\n        method: 'GET',\n        dataType: 'jsonp',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': token,\n        }\n    }).then(\n      (response) => {\n          return response.json();\n      }).then((result) => {\n        return result;\n      }).catch((error) => {\n          console.log(\"fetchGet: \" + webApi, error);\n      }\n    );   \n}\n\nexport let fetchPost = (webApi, data) => {\n    //console.log(\"web api\", PROD_HOST_NAME + \"/\" + webApi);\n    return fetch(PROD_HOST_NAME + \"/\" + webApi,{\n        method: 'POST',\n        //mode: 'cors',\n        headers: {\n            'Access-Control-Allow-Origin': DEV_ACCESS_CONTROL_ALLOW_ORIGIN,\n            'Accept': 'application/json',\n            'content-type': 'application/json',\n            'Authorization': token\n        },\n        dataType: 'jsonp',\n        credentials: 'include',\n        body: JSON.stringify(data)\n    }).then(\n      (response) => {\n          return response.json();\n      }).then((result) => {\n        return result;\n      }).catch((error) => {\n          console.log(\"fetchPost\", error);\n      }\n    );   \n}","/* eslint-disable no-constant-condition */\nimport { put } from 'redux-saga/effects'\nimport { push } from 'connected-react-router'\nimport {\n  fetchGet,\n  fetchPost\n} from '../../ApiService';\nimport {\n  LOGIN_SUCCESS,\n  LOGIN_FAIL\n} from '../actionTypes';\n\nimport {\n  setCookie\n} from '../../ApiService'\n\nexport function* loginRequest(action) {\n  let {account, password} = action.payload;\n  let result = yield fetchPost(\"login\", {email: account, password: password});\n\n  if(result.status === \"fail\"){\n    console.log('Fail:', result);\n    yield put({ \n      type: LOGIN_FAIL,\n      payload: {\n        message: result.message\n      }\n    })\n  }else if(result.status === \"success\"){\n    console.log('success:', result);\n    yield put({ \n      type: LOGIN_SUCCESS,\n      payload: {\n        token: result.token,\n        email: result.email,\n        userName: result.userName\n      }\n    });\n    yield setCookie('token', result.token);\n    yield setCookie('userName', result.userName);\n    yield put(push('/'));\n  }\n}\n","/* eslint-disable no-constant-condition */\nimport { put } from 'redux-saga/effects';\nimport { push } from 'connected-react-router';\nimport {\n  fetchGet,\n  fetchPost\n} from '../../ApiService';\nimport {\n    SET_ONLINE_COUNT,\n    CONNECT_WEB_SOCKET_SUCCESS,\n    CONNECT_WEB_SOCKET_FAIL\n\n} from '../actionTypes';\nimport webSocketClient from 'socket.io-client'\nimport {\n    PROD_HOST_NAME,\n    DEV_HOST_NAME\n} from '../../config'\n\n\n\nexport function *connectWebSocket(action) {\n    console.log('connectWebSocket', action);\n    let webSocket = yield webSocketClient(PROD_HOST_NAME); //webSocketClient('http://localhost:3000');\n    if(webSocket){\n        yield put({\n            type: CONNECT_WEB_SOCKET_SUCCESS,\n            payload: webSocket\n        })\n    }else{\n        yield put({\n            type: CONNECT_WEB_SOCKET_FAIL\n        })\n    }\n}\n","/* eslint-disable no-constant-condition */\n\nimport { put, takeEvery } from 'redux-saga/effects'\nimport {\n  LOGIN_REQUEST,\n  CONNECT_WEB_SOCKET\n} from '../actionTypes'\nimport {\n    loginRequest\n} from './loginSaga';\nimport {\n  connectWebSocket\n} from './chatRoomSaga'\n\nexport default function* rootSaga() {\n  yield takeEvery(LOGIN_REQUEST, loginRequest);\n  yield takeEvery(CONNECT_WEB_SOCKET, connectWebSocket);\n}\n","import { createBrowserHistory } from 'history';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createSagaMiddleware from 'redux-saga';\nimport createRootReducer from './reducers/rootReducer';\nimport rootSaga from './sagas/saga';\n\nexport const history = createBrowserHistory()\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport default function configureStore(preloadedState) {\n  const store = createStore(\n    createRootReducer(history), // root reducer with router state\n    preloadedState,\n    compose(\n      applyMiddleware(\n        routerMiddleware(history), // for dispatching history actions\n        sagaMiddleware\n      ),\n    ),\n  )\n  sagaMiddleware.run(rootSaga);\n  return store\n}","import React, {useEffect} from \"react\";\nimport { connect } from 'react-redux';\nimport {Cell, Grid, Row} from '@material/react-layout-grid';\nimport Card, {\n    CardPrimaryContent,\n    CardMedia,\n    CardActions,\n    CardActionButtons,\n    //CardActionIcons\n} from \"@material/react-card\";\nimport Button from '@material/react-button';\nimport TextField, {HelperText, Input} from '@material/react-text-field';\nimport MaterialIcon from '@material/react-material-icon';\n\nimport {\n    setAccountPassword,\n    login,\n    checkLogined\n} from '../redux/Actions/loginAction';\n\nconst Login = ({\n    account, \n    password, \n    status, \n    message, \n    setAccountPassword,\n    login,\n    checkLogined\n}) => {\n    useEffect(() => {\n        // const token =  getCookie('token');\n        // if(token) dispatch(push('/'));\n        checkLogined();\n    }, []);\n\n    let loginHandler = async (e) => {\n        if(account === \"\"){\n            alert(\"Please enter your account\");\n            return;\n        }\n        if(!account.includes('@')){\n            alert(\"Illegal email address format\");\n            return;\n        }\n        if(password === \"\"){\n            alert(\"Please enter your password\");\n            return;\n        }\n        login(account, password)\n    }\n\n    return(\n    <Grid>        \n        <Row>    \n            <Cell columns={3} />\n            <Cell columns={6}>\n                <Card id=\"loginCard\">\n                    <CardPrimaryContent id=\"tittle\">\n                        <h1>Rick's Chat Room: Beta</h1>\n                        <CardMedia id=\"logoImg\" square imageUrl={require('../Image/chat.png')} />   \n                    </CardPrimaryContent>\n                    <CardActions style={{display: \"block\"}}>\n                        <CardActionButtons id=\"textFieldArea\">\n                            <TextField\n                                label='Email'\n                                className=\"textField\" \n                                //helperText={<HelperText>Help Me!</HelperText>}\n                                //onTrailingIconSelect={() => setAccount(\"\")}\n                                trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                            >\n                                <Input\n                                    id=\"account\"\n                                    type=\"email\"\n                                    value={account}\n                                    onChange={setAccountPassword} \n                                />\n                            </TextField>\n                            <TextField\n                                label='Password'\n                                className=\"textField\"  \n                                //helperText={<HelperText>Help Me!</HelperText>}\n                                //onTrailingIconSelect={() => setPassword(\"\")}\n                                trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n                            >\n                                <Input\n                                    id=\"password\"\n                                    type=\"password\"\n                                    value={password}\n                                    onChange={setAccountPassword} \n                                />\n                            </TextField>\n                            <div>\n                                <Button \n                                    className=\"loginBtn\"\n                                    outlined={true} \n                                    raised={true} \n                                    icon={<MaterialIcon role=\"button\" icon=\"login\" />}\n                                    onClick={loginHandler}\n                                >Login\n                                </Button>\n                                <Button \n                                    className=\"loginBtn\"\n                                    outlined={true} \n                                    raised={true} \n                                    disabled={true}\n                                    icon={<MaterialIcon role=\"button\" icon=\"account_box\" />}\n                                    onClick={loginHandler}\n                                >Signup\n                                </Button>\n                            </div>\n                        </CardActionButtons>\n                    </CardActions>\n                    {(status === \"error\")?(\n                        <div>\n                            <p className='warnMsg'>{message}</p>\n                        </div>\n                    ): []}\n                </Card>\n            </Cell>\n            <Cell columns={3} />\n        </Row>\n    </Grid>\n    )\n}\n\nlet mapDispatchToProps = {\n    setAccountPassword,\n    login,\n    checkLogined\n}\n\nlet mapStateToProps = (state) => {\n    return {\n        account: state.loginReducer.account,\n        password: state.loginReducer.password, \n        status: state.loginReducer.status, \n        message: state.loginReducer.message, \n    }\n}\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(Login);","import {\n    SET_USER_ACCOUNT,\n    SET_USER_PASSWORD,\n    LOGIN_REQUEST\n} from '../actionTypes';\nimport { push } from 'connected-react-router';\nimport {\n    getCookie\n} from '../../ApiService';\n\n\nexport let setAccountPassword = (e) => {\n    const {id, value} = e.currentTarget;\n    switch(id){\n        case \"account\":\n            return({\n                type: SET_USER_ACCOUNT,\n                payload: value,\n            })\n        case \"password\":\n            return({\n                type: SET_USER_PASSWORD,\n                payload: value,\n            })\n    }\n}\n\nexport let login = (account, password) => {\n    return({\n        type: LOGIN_REQUEST,\n        payload: {\n            account: account,\n            password: password\n        }   \n    })\n}\n\nexport let checkLogined = () => {\n    const token =  getCookie('token');\n    console.log('checkLogined', token !== undefined);\n    if(token) return(push('/'));\n    else return ({type: null});\n}\n","import React, {useState, useEffect} from 'react';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {Cell, Grid, Row} from '@material/react-layout-grid';\nimport MaterialIcon from '@material/react-material-icon';\nimport { getCookie } from '../../../ApiService';\nimport MessageBox from './MessageBox';\n\nconst MessagePanel = () => {\n    const {messageBox} = useSelector(state => state.chatRoomReducer);\n    const userName = getCookie('userName');\n    let messagesEnd;\n\n    useEffect(() => {\n        messagesEnd.scrollIntoView({ behavior: \"smooth\" });\n    }) \n\n    return(\n        <div id=\"messagePanel-bg\">\n            <div id=\"messagePanel\">\n                {\n                    messageBox.map(message => (\n                        <Row key={\"row\" + message.userName + message.timestamp}>\n                            <Cell columns={12}>\n                                <div className={(userName === message.useName)? \"messageBox_mine\": \"messageBox_other\"}>\n                                    <MaterialIcon role=\"button\" icon=\"account_circle\" className=\"account_icon\"/>\n                                    <span>{message.useName}({message.timestamp})</span>\n                                    <div className={(userName === message.useName)? \"message_mine\": \"message_other\"}>\n                                        {message.message}\n                                    </div>\n                                </div>\n                            </Cell>\n                        </Row>\n                    ))\n                }\n                <div style={{ float:\"left\", clear: \"both\" }}\n                    ref={(el) => { messagesEnd = el; }}>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MessagePanel;","import React, {useEffect, useState} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport TextField, {Input} from '@material/react-text-field';\nimport MaterialIcon from '@material/react-material-icon';\nimport Button from '@material/react-button';\nimport {getCookie} from '../../../ApiService';\n\nconst MessageSender = () => {\n    const [message, setMessage] = useState('');\n    const  {webSocket} = useSelector(state => state.chatRoomReducer);\n    const [enterPress, setEnterPress] = useState(false);\n    const useName = getCookie('userName');\n    //let pressed = useKey('enter');\n    const messageHandler = (e) => {\n        const {value} = e.currentTarget;\n        setMessage(value);\n    }\n\n    useEffect(() => {\n        if(enterPress) {\n            sendMessage();\n            setEnterPress(false);\n        }\n    });\n\n    const sendMessage = () => {\n        const timestamp = new Date().getHours() + ':' + new Date().getMinutes() + \n            ':' + new Date().getSeconds() + ':' + new Date().getUTCMilliseconds();\n        console.log('sendMessage', message);\n        webSocket.emit('send', {\n            useName: useName,\n            message: message,\n            timestamp: timestamp\n        });\n        setMessage('');\n    }\n\n    const enterClick = (key) => {\n        //console.log('key', key);\n        if(key.key === 'Enter'){\n            setEnterPress(true);\n        }\n    }\n\n    useEffect(() => {\n        if(webSocket){\n            document.addEventListener('keypress', enterClick);\n        }\n        return () => {\n            document.removeEventListener('keypress', enterClick)\n        }\n    }, [webSocket])\n\n    return(\n        <div id='messageSender'>\n            <TextField\n                label='你想說什麼'\n                id=\"msgTextEdit\" \n                \n                //helperText={<HelperText>Help Me!</HelperText>}\n                onTrailingIconSelect={() => setMessage(\"\")}\n                trailingIcon={<MaterialIcon role=\"button\" icon=\"delete\"/>}\n            >\n                <Input\n                id=\"msgTextEditInput\" \n                    value={message}\n                    onChange={messageHandler} \n                />\n            </TextField>\n            <div className=\"wrapper-div\">\n                <Button \n                    id=\"msgSendBtn\"\n                    outlined={true} \n                    raised={true} \n                    icon={<MaterialIcon role=\"button\" icon=\"send\" />}\n                    onClick={sendMessage}\n                >Send\n                </Button>\n            </div>\n            \n        </div>\n    );\n}\n\nexport default MessageSender;","import React, { useEffect, useCallback, useState } from 'react';\nimport {connect, useDispatch} from 'react-redux';\nimport {Cell, Grid, Row} from '@material/react-layout-grid';\n\nimport MessagePanel from './Components/MessagePanel';\nimport MessageSender from './Components/MessageSender';\n\nimport {\n    connectWebSocket,\n    setOnlineCount,\n} from '../../redux/Actions/charRoomAction';\n\n\nconst ChatRoom = ({webSocket, onlineCount, connectWebSocket, setOnlineCount}) => {  \n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        if(webSocket){\n            initWebSocket();\n        }else{\n            connectWebSocket();\n        }\n    }, [webSocket]);\n\n    const initWebSocket = () => {\n        console.log('initWebSocket');\n        webSocket.on('online', onlineCount => {\n            //console.log('onlineCount', onlineCount);\n            setOnlineCount(onlineCount)\n        });\n\n        webSocket.on('msg', message => {\n            console.log('message', message)\n            dispatch({\n                type: 'SET_MESSAGE_BOX',\n                payload: message\n            });\n        });\n    }\n\n    return (\n    <Grid id='mainGrid'>\n        <Row>\n            <Cell columns={12}>\n                <MessagePanel/>\n            </Cell>\n        </Row>\n        <Row>\n            <Cell columns={12}>\n                <MessageSender/>\n            </Cell>\n        </Row>\n    </Grid>\n    );\n}\n\nconst mapDispatchToProps = {\n    connectWebSocket,\n    setOnlineCount\n}\n\nconst mapStateToProps = (state) => {\n    return{\n        webSocket: state.chatRoomReducer.webSocket,\n        onlineCount: state.chatRoomReducer.onlineCount\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatRoom);","import {\n    CONNECT_WEB_SOCKET,\n    SET_ONLINE_COUNT\n} from '../actionTypes'\n\n\nexport let connectWebSocket = () => {\n    return {\n        type: CONNECT_WEB_SOCKET,\n    }\n}\n\nexport let setOnlineCount = (onlineCount) => {\n    return {\n        type: SET_ONLINE_COUNT,\n        payload: onlineCount\n    }\n}\n\n\n","import React, {useEffect} from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { push } from 'connected-react-router';\nimport {Cell, Grid, Row} from '@material/react-layout-grid';\nimport TopAppBar, {\n    TopAppBarFixedAdjust, \n    TopAppBarIcon,\n    TopAppBarRow,\n    TopAppBarSection,\n    TopAppBarTitle,\n  } from '@material/react-top-app-bar';\nimport MaterialIcon from '@material/react-material-icon';\nimport {getCookie, delCookie} from '../ApiService';\n\nimport ChatRoom from './ChatRoom/ChatRoom';\n\nconst Home = () => {\n    const dispatch = useDispatch();\n    const {status} = useSelector(state => state.loginReducer);\n    const {onlineCount} = useSelector(state => state.chatRoomReducer);\n    const token =  getCookie('token');\n    const userName =  getCookie('userName');\n\n    useEffect(() => {\n        if(!token) dispatch(push('/login'));\n    }, [token]);\n\n    const logoutHandler = () => {\n        console.log('logout');\n        delCookie('token');\n        delCookie('userName');\n        dispatch(push('/login'));\n    }\n\n    useEffect(() => {\n        //localStorage.setItem('myData', '123');\n        /*\n        const data = localStorage.getItem('myData')\n        console.log('localStorage', data);\n        */\n    })\n    \n    return (\n    <>\n    {(token)?\n    <>\n       <TopAppBar>\n            <TopAppBarRow>\n                <TopAppBarSection align='start'>\n                    <TopAppBarIcon navIcon tabIndex={0}>\n                        <MaterialIcon hasRipple icon='menu' onClick={() => console.log('click')}/>\n                    </TopAppBarIcon>\n                    <TopAppBarTitle>Welcome {userName}, Online People: {onlineCount}</TopAppBarTitle>\n                </TopAppBarSection>\n                <TopAppBarSection align='end' role='toolbar'>\n                    <TopAppBarIcon actionItem tabIndex={0}>\n                        <MaterialIcon \n                            aria-label=\"print page\" \n                            hasRipple \n                            icon='exit_to_app' \n                            onClick={logoutHandler}\n                        />\n                    </TopAppBarIcon>\n                </TopAppBarSection>\n            </TopAppBarRow>\n        </TopAppBar>\n        <TopAppBarFixedAdjust>\n            <ChatRoom />\n        </TopAppBarFixedAdjust>\n    </>\n    :[]\n    }\n    </>\n    )\n}\n\nexport default Home;","import React, { useState } from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { Route, Switch } from 'react-router'; // react-router v4/v5\r\nimport { ConnectedRouter } from 'connected-react-router';\r\nimport configureStore, { history } from './redux/configureStore';\r\nimport './App.scss';\r\n\r\nimport Navigator from './view/Navigator';\r\nimport Login from './view/Login';\r\nimport Home from './view/Home';\r\n\r\nconst store = configureStore(/* provide initial state if any */)\r\n\r\nconst App = () => {\r\n    return (\r\n        <Provider store={store}>\r\n            {/*<Navigator />*/}\r\n            <ConnectedRouter history={history}>      \r\n            <Switch>\r\n                <Route exact path=\"/\">\r\n                    <Home />\r\n                </Route>\r\n                <Route exact path=\"/login\">\r\n                    <Login/>\r\n                </Route>\r\n            </Switch>\r\n            </ConnectedRouter>\r\n        </Provider>\r\n    );\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}